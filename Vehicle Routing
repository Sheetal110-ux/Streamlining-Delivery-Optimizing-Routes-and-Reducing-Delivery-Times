import pandas as pd
import itertools
from datetime import datetime
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

# Function to calculate time difference between two datetime strings
def calculate_time_difference(start_datetime, end_datetime):
    start = datetime.strptime(start_datetime, '%Y-%m-%d %I:%M %p')
    end = datetime.strptime(end_datetime, '%Y-%m-%d %I:%M %p')
    return (end - start).seconds / 60  # Return time difference in minutes

# Read restaurant and customer data from CSV files
restaurants_df = pd.read_csv('outrest.csv')
customers_df = pd.read_csv('cust_time2.csv')

# Extract necessary information
restaurant_locations = restaurants_df[['Latitude', 'Longitude', 'date_y', 'time_y']].values.tolist()
customer_locations = customers_df[['Latitude', 'Longitude', 'date_x', 'time_x']].values.tolist()

# Create time windows for customers
customer_time_windows = []
for customer in customers_df.itertuples():
    start_datetime = f"{customer.date_x} {customer.time_x}"
    end_datetime = f"{customer.date_x} {customer.time_x}"  # Using date_x and time_x for both start and end times
    customer_time_windows.append((start_datetime, end_datetime))

# Rest of the code...


# Function to calculate distance between two points (using Euclidean distance for simplicity)
def calculate_distance(location1, location2):
    x1, y1 = location1
    x2, y2 = location2
    return ((x2 - x1) * 2 + (y2 - y1) * 2) ** 0.5

# Function to generate all possible permutations of delivery locations
def generate_permutations(locations):
    return list(itertools.permutations(locations))

# Function to create the time matrix based on the distance matrix and vehicle speed
def create_time_matrix(distance_matrix, vehicle_speed):
    return [[distance / vehicle_speed for distance in row] for row in distance_matrix]

# Function to optimize vehicle routing
def optimize_vehicle_routing(depot, delivery_locations, vehicle_capacity, vehicle_speed):
    num_locations = len(delivery_locations) + 1  # Add 1 for the depot
    num_vehicles = len(vehicle_capacity)

    # Create distance matrix
    distance_matrix = [[calculate_distance(location1, location2) for location2 in delivery_locations] for location1 in delivery_locations]

    # Create time matrix based on distance matrix and vehicle speed
    time_matrix = create_time_matrix(distance_matrix, vehicle_speed)

    # Create routing index manager
    manager = pywrapcp.RoutingIndexManager(num_locations, num_vehicles, depot)

    # Create routing model
    routing = pywrapcp.RoutingModel(manager)

    # Create transit callback
    def transit_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return time_matrix[from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(transit_callback)

    # Define cost of each arc
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add capacity constraint
    def demand_callback(from_index):
        from_node = manager.IndexToNode(from_index)
        return vehicle_capacity[from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        vehicle_capacity,  # vehicle maximum capacities
        True,  # start cumul to zero
        'Capacity'
    )

    # Set search parameters
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    # Solve the problem
    solution = routing.SolveWithParameters(search_parameters)

    # Output the routes
    if solution:
        for vehicle_num in range(num_vehicles):
            index = routing.Start(vehicle_num)
            route = []
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                if node_index == 0:
                    route.append("Depot")
                else:
                    route.append(f"Customer {node_index}")
                index = solution.Value(routing.NextVar(index))
            print(f"Vehicle {vehicle_num + 1} Route: {route}")
    else:
        print("No solution found")

# Sample data
depot = 0
delivery_locations = [(12.95404312, 77.56886512), 
                      (12.91804385, 77.63768893), 
                      (12.91192952, 77.63801917)]
vehicle_capacity = [100, 100, 100]  # Capacity of each vehicle
vehicle_speed = 30  # km/h

# Optimize vehicle routing
optimize_vehicle_routing(depot, delivery_locations, vehicle_capacity, vehicle_speed)
